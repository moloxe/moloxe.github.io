{
  "title": "Shaders en corto",
  "creationDate": "2024-05-07T18:01:21.031Z",
  "lastUpdate": "2024-11-19T16:50:33.247Z",
  "categories": [
    "tech",
    "edu",
    "art"
  ],
  "container": [
    {
      "text": "Hola! esta vez intentaré plasmar lo que aprendí sobre shaders. Se implementarán algunos temas en el contexto de shaders. Con un poco de fe, espero sirva.",
      "type": "MarkdownBlock"
    },
    {
      "text": "Los shaders se aplican sobre objetos 3D, por lo que es necesario contar con uno antes de usarlos (spoiler: solo se usa un cuadrado).",
      "type": "MarkdownBlock"
    },
    {
      "text": "---",
      "type": "MarkdownBlock"
    },
    {
      "text": "# Shaders",
      "type": "MarkdownBlock"
    },
    {
      "text": "Los shaders son una forma especial de renderizar gráficos. A diferencia de mostrar un círculo en una pantalla (con algún lenguaje de programación), el equivalente en shaders sería saber si una coordenada pertenece a ese círculo y determinar que color asignarle.",
      "type": "MarkdownBlock"
    },
    {
      "text": "Hay muchas suposiciones incompletas en esa definición, pero, es suficiente para saber que no son una forma tradicional de programar con gráficos.",
      "type": "MarkdownBlock"
    },
    {
      "text": "## GLSL + P5js",
      "type": "MarkdownBlock"
    },
    {
      "text": "GLSL es el lenguaje de programación para shaders. El cómo se comunica un shader con un programa depende mucho de la plataforma. P5js es una librería que facilita trabajar con shaders en el navegador usando WEBGL.",
      "type": "MarkdownBlock"
    },
    {
      "text": "- Vertex shader: Define dónde renderizar el vértice evaluado\n- Fragment shader: Define el color a renderizar cuando se evalúa una coordenada respecto al objeto.",
      "type": "MarkdownBlock"
    },
    {
      "text": "### Vertex shaders",
      "type": "MarkdownBlock"
    },
    {
      "text": "P5js ofrece la propiedad `aPosition` como coordenadas del vértice.",
      "type": "MarkdownBlock"
    },
    {
      "text": "En P5js los vértices están en el rango de [0, 1] y para renderizarlo como se \"espera\", es necesario escalarlo a un rango entre [-1, 1].",
      "type": "MarkdownBlock"
    },
    {
      "text": "Para definir la posición del vértice, se tiene que asignar un vector a `gl_Position`.",
      "type": "MarkdownBlock"
    },
    {
      "text": "```glsl\n// shader.vert\nattribute vec3 aPosition;\n\nvoid main() {\n  vec4 pos = vec4(aPosition, 1.0);\n  pos = pos * 2.0 - 1.0;\n  gl_Position = pos;\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "### Fragment shaders",
      "type": "MarkdownBlock"
    },
    {
      "text": "Para definir el color a renderizar, se tiene que asignar un vector (que representa un color) a `gl_FragColor`.",
      "type": "MarkdownBlock"
    },
    {
      "text": "```glsl\n// shader.frag\nprecision mediump float;\n\nvoid main() {\n  gl_FragColor = vec4(1.0, 0, 0, 1.0);\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "*Nota: GLSL es estricto con el uso de coma flotante (`float`), además, es necesario definir la precisión.*",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Sketch P5js",
      "type": "MarkdownBlock"
    },
    {
      "text": "Para cargar un shader en P5js, es necesario especificar que se usará WEBGL al crear el canvas.",
      "type": "MarkdownBlock"
    },
    {
      "text": "```js\nlet myShader;\n\nfunction preload() {\n  myShader = loadShader(\"shader.vert\", \"shader.frag\");\n}\n\nfunction setup() {\n  createCanvas(320, 320, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  shader(myShader);\n  rect(0, 0, 0, 0);\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "*Nota: El `rect` se define con un tamaño 0. Esto es algo específico de P5js (con algunas figuras en 2D), cuando se carga un shader este ignora los parámetros definidos. Sin embargo, si se respetan las proporciones de los vértices.*",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\nprecision mediump float;\\n\\nvoid main() {\\n  gl_FragColor = vec4(1.0, 0, 0, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  shader(myShader);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Para probarlo es posible cargar los shaders en `createShader` como strings.\n\nCopia y pega lo siguiente en:\nhttps://editor.p5js.org/",
      "type": "MarkdownBlock"
    },
    {
      "text": "```js\nconst vertShader = `\nattribute vec3 aPosition;\n\nvoid main() {\n  vec4 pos = vec4(aPosition, 1.0);\n  pos = pos * 2.0 - 1.0;\n  gl_Position = pos;\n}\n\n`;\n\nconst fragShader = `\nprecision mediump float;\n\nvoid main() {\n  gl_FragColor = vec4(1.0, 0, 0, 1.0);\n}\n`;\n\nlet myShader;\nfunction setup() {\n  myShader = createShader(vertShader, fragShader);\n  createCanvas(320, 320, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  shader(myShader);\n  rect(0, 0, 0, 0);\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "Se usará este sketch como referencia en los siguientes ejemplos.",
      "type": "MarkdownBlock"
    },
    {
      "text": "---",
      "type": "MarkdownBlock"
    },
    {
      "text": "# Esencial",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Círculos",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\nprecision mediump float;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  float radius = 0.5;\\n  vec2 circle1 = vec2(-0.5, -0.5);\\n  vec2 circle2 = vec2(0.5, 0.5);\\n\\n  float color = min(\\n    step(radius, length(vXY - circle1.xy)),\\n    step(radius, length(vXY - circle2.xy))\\n  );\\n\\n  color = 1.0 - color;\\n  gl_FragColor = vec4(vec3(color), 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  shader(myShader);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Para determinar un color en función de la posición, es necesario comunicar al `fragment shader` la posición. Esto es posible definiendo variables las cuales pueden compartir ambos `vertex shader` y `fragment shader`.",
      "type": "MarkdownBlock"
    },
    {
      "text": "```glsl\n// shader.vert\nattribute vec3 aPosition;\nvarying vec2 vXY; // VARIABLE COMPARTIDA\n\nvoid main() {\n  vec4 pos = vec4(aPosition, 1.0);\n  pos = pos * 2.0 - 1.0;\n  vXY = pos.xy;\n  gl_Position = pos;\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "Luego se puede recibir desde el `fragment shader` la variable `vXY`:",
      "type": "MarkdownBlock"
    },
    {
      "text": "```glsl\n// shader.frag\nprecision mediump float;\nvarying vec2 vXY; // VARIABLE COMPARTIDA\n\nvoid main() {\n  float radius = 0.5;\n  vec2 circle1 = vec2(-0.5, -0.5);\n  vec2 circle2 = vec2(0.5, 0.5);\n\n  float color = min(\n    step(radius, length(vXY - circle1.xy)),\n    step(radius, length(vXY - circle2.xy))\n  );\n\n  color = 1.0 - color;\n  gl_FragColor = vec4(vec3(color), 1.0);\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "Explicación: Para determinar el color, primero se calcula la distancia a alguno de los círculos. Con la función `length` se puede obtener la distancia euclidiana al origen, en este caso se suma para hacer una traslación respecto al punto evaluado. Luego `step` devuelve `1` si la distancia es mayor a `radius`, por ese motivo se invierte el color antes de definirlo.",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Cuadrados",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\nprecision mediump float;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  float size1 = 0.5;\\n  vec2 square1 = vec2(0.5, 0.5);\\n  float size2 = 0.25;\\n  vec2 square2 = vec2(-0.5, -0.5);\\n  float x = vXY.x;\\n  float y = vXY.y;\\n  float color = min((\\n      step(size1, abs(square1.x - x)) +\\n      step(size1, abs(square1.y - y))\\n    ), (\\n      step(size2, abs(square2.x - x)) +\\n      step(size2, abs(square2.y - y))\\n  ));\\n  color = 1.0 - color;\\n  gl_FragColor = vec4(vec3(color), 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  shader(myShader);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "```glsl\nprecision mediump float;\nvarying vec2 vXY;\n\nvoid main() {\n  float size1 = 0.5;\n  vec2 square1 = vec2(0.5, 0.5);\n  float size2 = 0.25;\n  vec2 square2 = vec2(-0.5, -0.5);\n  float x = vXY.x;\n  float y = vXY.y;\n  float color = min((\n      step(size1, abs(square1.x - x)) +\n      step(size1, abs(square1.y - y))\n    ), (\n      step(size2, abs(square2.x - x)) +\n      step(size2, abs(square2.y - y))\n  ));\n  color = 1.0 - color;\n  gl_FragColor = vec4(vec3(color), 1.0);\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "Explicación: A diferencia del círculo, los cuadrados se pueden determinar con una distancia `manhattan` que sería simplemente sumar si se encuentra en el rango del eje `x` con si se encuentra en el eje `y`.",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Movimiento",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform vec3 uCircle;\\n\\nvoid main() {\\n  float radius = uCircle.z;\\n  float color = step(radius, length(vXY - uCircle.xy));\\n  color = 1.0 - color;\\n  gl_FragColor = vec4(vec3(color), 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  const angle = (TWO_PI * (frameCount % 200)) / 200;\\n  const x = 0.5 * cos(angle);\\n  const y = 0.5 * sin(angle);\\n  background(0);\\n  shader(myShader);\\n  myShader.setUniform(\\\"uCircle\\\", [x, y, 0.5]);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Para compartir variables desde JS a los shaders, se utilizan los `uniform`. En este ejemplo se comparte la posición y el radio como un `vec3`.",
      "type": "MarkdownBlock"
    },
    {
      "text": "```js\nconst vertShader = `\nattribute vec3 aPosition;\nvarying vec2 vXY;\n\nvoid main() {\n  vec4 pos = vec4(aPosition, 1.0);\n  pos = pos * 2.0 - 1.0;\n  vXY = pos.xy;\n  gl_Position = pos;\n}\n\n`;\n\nconst fragShader = `\nprecision mediump float;\nvarying vec2 vXY;\nuniform vec3 uCircle;\n\nvoid main() {\n  float radius = uCircle.z;\n  float color = step(radius, length(vXY - uCircle.xy));\n  color = 1.0 - color;\n  gl_FragColor = vec4(vec3(color), 1.0);\n}\n`;\n\nlet myShader;\nfunction setup() {\n  myShader = createShader(vertShader, fragShader);\n  createCanvas(320, 320, WEBGL);\n}\n\nfunction draw() {\n  const angle = (TWO_PI * (frameCount % 200)) / 200;\n  const x = 0.5 * cos(angle);\n  const y = 0.5 * sin(angle);\n  background(0);\n  shader(myShader);\n  myShader.setUniform(\"uCircle\", [x, y, 0.5]);\n  rect(0, 0, 0, 0);\n}\n```",
      "type": "MarkdownBlock"
    },
    {
      "text": "---",
      "type": "MarkdownBlock"
    },
    {
      "text": "# Listo!",
      "type": "MarkdownBlock"
    },
    {
      "text": "Con eso es suficiente para empezar a experimentar, lo que sigue no viene con explicación. Sin embargo, puedes obtener el código inspeccionando la página.",
      "type": "MarkdownBlock"
    },
    {
      "text": "---",
      "type": "MarkdownBlock"
    },
    {
      "text": "# Experimentos",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Campos vectoriales 💀",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"type\":\"image\",\"url\":\"https://mathworld.wolfram.com/images/eps-svg/VectorPlot_1000.png\"}",
      "type": "LinkBlock"
    },
    {
      "text": "*Nota: No se aprecia muy bien las rotaciones, para notarlas mejor se podría calcular desde JS y enviar las direcciones a los shaders. Para el color se escaló la distancia en ángulo entre el origen y el destino.*",
      "type": "MarkdownBlock"
    },
    {
      "text": "### [-y, x]",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\n#define PI 3.1415926535897932384626433832795\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform float uTime;\\nfloat scale = 4.0;\\n\\nvec2 getTarget(vec2 origin) {\\n  float x = origin.x;\\n  float y = origin.y;\\n  return vec2(-y, x);\\n}\\n\\nfloat getAngleDiff(float angle1, float angle2) {\\n  float angle = angle1 - angle2;\\n  if (angle > PI) {\\n    angle -= 2.0 * PI;\\n  } else if (angle <= -PI) {\\n    angle += 2.0 * PI;\\n  }\\n  return angle;\\n}\\n\\nvoid main() {\\n\\n  vec2 origin = vec2(vXY.x * scale, vXY.y * scale);\\n  float angleO = atan(origin.y, origin.x);\\n\\n  vec2 target = getTarget(origin);\\n  target = (1.0 - uTime) * origin + uTime * target;\\n  float angleT = atan(target.y, target.x);\\n\\n  float eDist = length(origin - target);\\n  float aDist = getAngleDiff(angleO, angleT);\\n\\n  float eClose = 1.0 - log(eDist + 1e-9); // magia\\n  float aClose = aDist / PI + 1.0; // [0, 1]\\n\\n  float r = (eClose + aClose) / 2.0;\\n  float g = eClose;\\n  float b = (eClose + (1.0 - aClose)) / 2.0;\\n  gl_FragColor = vec4(r, g, b, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  const t = (sin(frameCount / 50 + HALF_PI) - 1) / 2; // [0, 1]\\n  shader(myShader);\\n  myShader.setUniform(\\\"uTime\\\", t);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "### [y, x]",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\n#define PI 3.1415926535897932384626433832795\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform float uTime;\\nfloat scale = 4.0;\\n\\nvec2 getTarget(vec2 origin) {\\n  float x = origin.x;\\n  float y = origin.y;\\n  return vec2(y, x);\\n}\\n\\nfloat getAngleDiff(float angle1, float angle2) {\\n  float angle = angle1 - angle2;\\n  if (angle > PI) {\\n    angle -= 2.0 * PI;\\n  } else if (angle <= -PI) {\\n    angle += 2.0 * PI;\\n  }\\n  return angle;\\n}\\n\\nvoid main() {\\n\\n  vec2 origin = vec2(vXY.x * scale, vXY.y * scale);\\n  float angleO = atan(origin.y, origin.x);\\n\\n  vec2 target = getTarget(origin);\\n  target = (1.0 - uTime) * origin + uTime * target;\\n  float angleT = atan(target.y, target.x);\\n\\n  float eDist = length(origin - target);\\n  float aDist = getAngleDiff(angleO, angleT);\\n\\n  float eClose = 1.0 - log(eDist + 1e-9); // magia\\n  float aClose = aDist / PI + 1.0; // [0, 1]\\n\\n  float r = (eClose + aClose) / 2.0;\\n  float g = eClose;\\n  float b = (eClose + (1.0 - aClose)) / 2.0;\\n  gl_FragColor = vec4(r, g, b, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  const t = (sin(frameCount / 50 + HALF_PI) - 1) / 2; // [0, 1]\\n  shader(myShader);\\n  myShader.setUniform(\\\"uTime\\\", t);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "### [x^2 - y^2 - 4, 2xy]",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"url\":\"https://www.geogebra.org/resource/QPE4PaDZ/dfYUWD6GynXktJGE/material-QPE4PaDZ.png\"}",
      "type": "LinkBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\n#define PI 3.1415926535897932384626433832795\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform float uTime;\\nfloat scale = 4.0;\\n\\nvec2 getTarget(vec2 origin) {\\n  float x = origin.x;\\n  float y = origin.y;\\n  return vec2(x*x-y*y-4.0, 2.0*x*y);\\n}\\n\\nfloat getAngleDiff(float angle1, float angle2) {\\n  float angle = angle1 - angle2;\\n  if (angle > PI) {\\n    angle -= 2.0 * PI;\\n  } else if (angle <= -PI) {\\n    angle += 2.0 * PI;\\n  }\\n  return angle;\\n}\\n\\nvoid main() {\\n\\n  vec2 origin = vec2(vXY.x * scale, vXY.y * scale);\\n  float angleO = atan(origin.y, origin.x);\\n\\n  vec2 target = getTarget(origin);\\n  target = (1.0 - uTime) * origin + uTime * target;\\n  float angleT = atan(target.y, target.x);\\n\\n  float eDist = length(origin - target);\\n  float aDist = getAngleDiff(angleO, angleT);\\n\\n  float eClose = 1.0 - log(eDist + 1e-9); // magia\\n  float aClose = aDist / PI + 1.0; // [0, 1]\\n\\n  float r = (eClose + aClose) / 2.0;\\n  float g = eClose;\\n  float b = (eClose + (1.0 - aClose)) / 2.0;\\n  gl_FragColor = vec4(r, g, b, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  const t = (sin(frameCount / 50 + HALF_PI) - 1) / 2; // [0, 1]\\n  shader(myShader);\\n  myShader.setUniform(\\\"uTime\\\", t);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "### [x^2 - y^2 - 4, 2xy] *Update (2024/06/15)*",
      "type": "MarkdownBlock"
    },
    {
      "text": "Se implementó una mejor forma de representar el campo vectorial ✨",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\n#define PI 3.1415926535897932384626433832795\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform float uTime;\\nfloat scale = 4.0;\\n\\nvec2 getTarget(vec2 origin) {\\n  float x = origin.x;\\n  float y = origin.y;\\n  return vec2(x*x - y*y - 4.0, 2.0*x*y);\\n}\\n\\nfloat getAngleDiff(float angle1, float angle2) {\\n  float angle = angle1 - angle2;\\n  if (angle > PI) {\\n    angle -= 2.0 * PI;\\n  } else if (angle <= -PI) {\\n    angle += 2.0 * PI;\\n  }\\n  return angle;\\n}\\n\\n// https://gist.github.com/983/e170a24ae8eba2cd174f\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvoid main() {\\n  vec2 origin = vec2(vXY.x * scale, vXY.y * scale);\\n  vec2 target = getTarget(origin);\\n  target = (1.0 - uTime) * origin + uTime * target;\\n\\n  float angleO = atan(origin.y, origin.x);\\n  float angleT = atan(target.y, target.x);\\n\\n  float eDist = length(origin - target);\\n  float aDist = getAngleDiff(angleO, angleT);\\n  aDist = aDist / (2.0 * PI); // [0, 1]\\n\\n  vec3 rgb = hsv2rgb(vec3(aDist, 1.0, eDist));\\n  gl_FragColor = vec4(rgb, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  const t = (sin(frameCount / 50 + HALF_PI) - 1) / 2; // [0, 1]\\n  shader(myShader);\\n  myShader.setUniform(\\\"uTime\\\", t);\\n  rect(0, 0, 0, 0);\\n}\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "En términos de hsv:\n- `hue`: Representa el ángulo que se forma entré el origen y el destino.\n- `saturation`: Constante.\n- `value`: El brillo depende de la distancia euclidiana entre el origen y el destino.",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Nubes",
      "type": "MarkdownBlock"
    },
    {
      "text": "Para este experimento es necesaria una función que genere ruido. La más conocida es Perlin Noise y se usó la siguiente implementación:",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"url\":\"https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#classic-perlin-noise\"}",
      "type": "LinkBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const perlinNoise = `\\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\\n\\nfloat cnoise(vec3 P){\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod(Pi0, 289.0);\\n  Pi1 = mod(Pi1, 289.0);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 / 7.0;\\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 / 7.0;\\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n`;\\n\\nconst vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform float uTime;\\n\\n${perlinNoise}\\n\\nvoid main() {\\n  vec2 vSlow = vec2(vXY.x * 1.5, vXY.y * 3.0);\\n  vec2 vFast = vec2(vXY.x * 5.0, vXY.y * 5.0);\\n\\n  float slow = cnoise(vec3(vSlow, vSlow.x + uTime/10.0));\\n  float fast = cnoise(vec3(vFast, vFast.x + uTime));\\n  float cloud = fast * 0.2 + slow * 0.8;\\n\\n  vec3 skyblue = vec3(0.5, 0.8, 0.85);\\n  vec3 white = vec3(1.0);\\n\\n  vec3 color = cloud * white + (1.0 - cloud) * skyblue;\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  createCanvas(320, 320, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  const t = frameCount / 50;\\n  shader(myShader);\\n  myShader.setUniform(\\\"uTime\\\", t);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Aquí es necesario hacer muchos cálculos al ojo, la técnica es si el ruido que va de [0, 1] está más cerca a 1 se pinta de blanco, caso contrario celeste.",
      "type": "MarkdownBlock"
    },
    {
      "text": "Además, se añadieron nubes lentas y más grandes para dar la sensación de densidad en ciertas zonas.",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Mandelbrot",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n\\n`;\\n\\nconst fragShader = `\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform float zoom;\\nfloat scale = 2.0;\\nconst int maxIt = 300;\\n\\nvoid main() {\\n  vec2 Z = vec2(0);\\n  vec2 C = vec2(vXY * scale * zoom);\\n  C.x -= 1.7864385;\\n  int it = 0;\\n  for(int i = 0; i < maxIt; ++i) {\\n    if(length(Z) > 16.0) {\\n      break;\\n    }\\n    Z = vec2(\\n      Z.x*Z.x - Z.y*Z.y + C.x,\\n      2.0 * Z.x * Z.y + C.y\\n    );\\n    it++;\\n  }\\n  if(maxIt == it) it = 0;\\n  float c = float(it)/float(maxIt);\\n  c = sqrt(c);\\n  float g = c;\\n  float b = sqrt(c);\\n  float r = c * (1.0 - c);\\n  gl_FragColor = vec4(r, g, b, 1.0);\\n}\\n`;\\n\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  mat = [];\\n  createCanvas(350, 320, WEBGL);\\n}\\n\\nlet zoom = 1;\\nlet dir = 0.99;\\nfunction draw() {\\n  background(0);\\n  shader(myShader);\\n  myShader.setUniform(\\\"zoom\\\", zoom);\\n  rect(0, 0, 0, 0);\\n  zoom *= dir;\\n  if (zoom < 2e-6) dir = 1 + (1 - dir);\\n  if (zoom > 2) dir = 2 - dir;\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Nota: Si esperas a que termine el zoom, notarás el límite de la precisión para los decimales.",
      "type": "MarkdownBlock"
    },
    {
      "text": "## Mandelbulb",
      "type": "MarkdownBlock"
    },
    {
      "text": "Adaptación de: https://editor.p5js.org/Taxen99/sketches/47CDg5-nV",
      "type": "MarkdownBlock"
    },
    {
      "text": "Este fue el motivo por el cuál quería aprender shaders, calcular el conjunto de Mandelbulb en JS es muy lento. Incluso en Java esto toma su tiempo y el renderizado no es muy intuitivo.",
      "type": "MarkdownBlock"
    },
    {
      "text": "Como pendiente, haré un post aparte intentando explicar cómo desarrollarlo. Cuando lo tenga listo pondré el enlace en esta sección. 🐵",
      "type": "MarkdownBlock"
    },
    {
      "text": "*Update (2024/06/15)*\n\nLo prometido es deuda: [Mandelbulb en GLSL](/blog/mandelbulb-en-glsl)",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"// Reference: https://editor.p5js.org/Taxen99/sketches/47CDg5-nV\\n\\nconst vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  pos = pos * 2.0 - 1.0;\\n  vXY = pos.xy;\\n  gl_Position = pos;\\n}\\n`;\\n\\nconst fragShader = `\\nprecision highp float;\\nvarying vec2 vXY;\\nuniform float uTime;\\n\\nvec3 toSpherical(vec3 v) {\\n  float r = sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\\n  float theta = atan(sqrt(v.x * v.x + v.y * v.y), v.z);\\n  float phi = atan(v.y, v.x);\\n  return vec3(r, theta, phi);\\n}\\n\\nfloat calcEstDist(vec3 pos, float power, const int maxIt) {\\n  vec3 zeta = pos;\\n  float dr = 1.0;\\n  float r = 0.0;\\n  for (int n = 0; n > -1; n++) {\\n    if(n > maxIt) break;\\n    vec3 spherical = toSpherical(zeta);\\n    r = spherical.x;\\n    if (r > 2.0) {\\n      break;\\n    }\\n    dr = pow(r, power - 1.0) * power * dr + 1.0;\\n    float powx =\\n      pow(spherical.x, power) *\\n      sin(spherical.y * power) *\\n      cos(spherical.z * power);\\n    float powy =\\n      pow(spherical.x, power) *\\n      sin(spherical.y * power) *\\n      sin(spherical.z * power);\\n    float powz =\\n      pow(spherical.x, power) *\\n      cos(spherical.y * power);\\n    zeta.x = powx + pos.x;\\n    zeta.y = powy + pos.y;\\n    zeta.z = powz + pos.z;\\n  }\\n  return 0.5 * log(r) * r / dr;\\n}\\n\\nmat3 rotY(float angle) {\\n  float s = sin(angle);\\n  float c = cos(angle);\\n  return mat3(\\n      c, 0.0,  -s,\\n    0.0, 1.0, 0.0,\\n      s, 0.0,   c\\n  );\\n}\\n\\nvoid main() {\\n  float power = 1.0 + uTime / 2.0;\\n  power = min(power, 10.0);\\n  float angle = uTime / 2.0;\\n  mat3 rot = rotY(angle);\\n\\n  vec3 pos = vec3(vXY.xy / 2.5 + 0.5, 1.0);\\n  pos.xy = pos.xy * 3.0 - 1.5;\\n\\n  pos = rot * pos;\\n  vec3 forward = rot * vec3(0, 0, 1.0);\\n\\n  float distEst = 1.0;\\n  const int maxIt = 100;\\n  int it = 0;\\n  float totalDist = 0.0;\\n\\n  for(int i = 0; i < maxIt; i++) {\\n    if(!(distEst > 0.001 && totalDist < 2.0)) break;\\n    distEst = calcEstDist(pos, power, 10);\\n    totalDist += distEst;\\n    pos -= forward * distEst;\\n    it += 1;\\n  }\\n\\n  if(it > maxIt) it = maxIt;\\n  if(totalDist >= 2.0) it = maxIt;\\n  float color = abs(float(it) / float(maxIt) - 1.0);\\n  if(color > 0.001) {\\n    float r = log(color + 1.0);\\n    float g = color * color;\\n    float b = sqrt(1.0 - color);\\n    gl_FragColor = vec4(r, g, b, 1.0);\\n  }\\n  else {\\n    gl_FragColor = vec4(0, 0, 0, 1.0);\\n  }\\n}\\n`;\\n\\nlet initTime;\\nlet myShader;\\nfunction setup() {\\n  myShader = createShader(vertShader, fragShader);\\n  mat = [];\\n  createCanvas(350, 320, WEBGL);\\n  initTime = new Date().getTime();\\n}\\n\\nfunction draw() {\\n  background(0);\\n  shader(myShader);\\n  let uTime = (new Date().getTime() - initTime) / 1000;\\n  myShader.setUniform(\\\"uTime\\\", uTime);\\n  rect(0, 0, 0, 0);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Nota mental: es increíble que todo esto pueda correr en el navegador 🤯",
      "type": "MarkdownBlock"
    },
    {
      "text": "## El juego de la vida de Conway",
      "type": "MarkdownBlock"
    },
    {
      "text": "Aquí la idea es guardar el estado en JS (ya que glsl no puede guardar estados entre frames) y calcular el siguiente estado con los shaders.",
      "type": "MarkdownBlock"
    },
    {
      "text": "Glsl permite uniforms de imágenes llamados [`sampler2D`](https://thebookofshaders.com/glossary/?search=texture2D), representan texturas y en este experimento se carga el estado inicial que es el canvas previo. El inicial son varios puntos aleatorios.",
      "type": "MarkdownBlock"
    },
    {
      "text": "{\"html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.js\\\"></script>\\n    <meta charset=\\\"utf-8\\\" />\\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\",\"js\":\"const vertShader = `\\nattribute vec3 aPosition;\\nvarying vec2 vXY;\\n\\nvoid main() {\\n  vec4 pos = vec4(aPosition, 1.0);\\n  vXY = pos.xy;\\n  pos = pos * 2.0 - 1.0;\\n  gl_Position = pos;\\n}\\n`;\\n\\nconst uStateSize = 320;\\nconst fragShader = `\\nprecision mediump float;\\nvarying vec2 vXY;\\nuniform sampler2D uState;\\nuniform vec2 uCircle;\\nfloat uStateSize = ${uStateSize}.0;\\n\\nfloat getState(int i, int j) {\\n  vec4 data = texture2D(\\n    uState,\\n    vec2(\\n      (float(i) + 0.5) / uStateSize,\\n      (float(j) - 0.5) / uStateSize\\n    )\\n  );\\n  return data.r;\\n}\\n\\nvoid main() {\\n  int i = int(vXY.x * uStateSize);\\n  int j = int(uStateSize) - int(vXY.y * uStateSize);\\n\\n  bool isAlive = getState(i, j) > 0.0;\\n  float tl =  getState(i - 1, j - 1);\\n  float t =  getState(i, j - 1);\\n  float tr =  getState(i + 1, j - 1);\\n  float l =  getState(i - 1, j);\\n  float r =  getState(i + 1, j);\\n  float bl =  getState(i - 1, j + 1);\\n  float b =  getState(i, j + 1);\\n  float br =  getState(i + 1, j + 1);\\n  float n = tl + t + tr + l + r + bl + b + br;\\n\\n  if(isAlive) {\\n    float nowIsDead = float(n < 1.1) + float(n > 3.9);\\n    if(nowIsDead > 0.1) isAlive = false;\\n  } else {\\n    float nowIsBorn = float(n > 2.9) * float(n < 3.1);\\n    if(nowIsBorn > 0.1) isAlive = true;\\n  }\\n\\n  float circleDist = length((vXY*2.0-1.0) - uCircle);\\n  if(circleDist < 0.08) isAlive = true;\\n\\n  gl_FragColor = vec4(vec3(float(isAlive)), 1.0);\\n}\\n`;\\n\\nlet myShader;\\nlet g;\\nfunction setup() {\\n  createCanvas(uStateSize, uStateSize, WEBGL);\\n  g = createGraphics(uStateSize, uStateSize, WEBGL);\\n  myShader = createShader(vertShader, fragShader);\\n  g.shader(myShader);\\n  g.background(0);\\n  g.stroke(255);\\n  for (let i = 0; i < uStateSize; i++) {\\n    for (let j = 0; j < uStateSize; j++) {\\n      if (random(1) > 0.99) {\\n        let x = i - uStateSize / 2;\\n        let y = j - uStateSize / 2;\\n        g.point(x, y);\\n      }\\n    }\\n  }\\n}\\n\\nfunction draw() {\\n  const angle = frameCount / 80;\\n  const uCircle = [cos(angle) / 2, sin(angle) / 2];\\n  myShader.setUniform(\\\"uState\\\", g);\\n  myShader.setUniform(\\\"uCircle\\\", uCircle);\\n  g.rect(0, 0, 0, 0);\\n  imageMode(CENTER);\\n  image(g, 0, 0, width, height);\\n}\\n\",\"css\":\"html, body {\\n  margin: 0;\\n  padding: 0;\\n  background: black;\\n}\\ncanvas {\\n  display: block;\\n  margin: auto;\\n  image-rendering: pixelated;\\n  image-rendering: crisp-edges;\\n}\\n\"}",
      "type": "LiveCodeBlock"
    },
    {
      "text": "Mi intención era implementar [Lenia](https://es.wikipedia.org/wiki/Lenia), pero tiene DEMASIADAS reglas. Pueden verlo en este video: https://www.youtube.com/watch?v=6kiBYjvyojQ",
      "type": "MarkdownBlock"
    },
    {
      "text": "Nota: Usar [`get`](https://p5js.org/reference/#/p5/get) en P5js para enviar el estado actual, da error en mobile después de algunos frames. Esto no sucede al usar `createGraphics`.",
      "type": "MarkdownBlock"
    },
    {
      "text": "---",
      "type": "MarkdownBlock"
    },
    {
      "text": "# Referencias\n- https://thebookofshaders.com/\n- https://itp-xstory.github.io/p5js-shaders/\n- https://editor.p5js.org/Taxen99/sketches/47CDg5-nV",
      "type": "MarkdownBlock"
    }
  ],
  "isPinned": true
}