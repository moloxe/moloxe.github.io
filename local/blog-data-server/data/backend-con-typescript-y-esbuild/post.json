{
  "title": "Backend con Typescript y ESBuild",
  "categories": [
    "tech",
    "edu"
  ],
  "creationDate": "2024-03-11T15:13:19.553Z",
  "lastUpdate": "2024-03-29T20:29:13.049Z",
  "isPinned": false,
  "container": [
    {
      "type": "MarkdownBlock",
      "text": "*Disclaimer: ESBuild por si solo no es suficiente para desarrollo backend. En este artículo se cubre un caso puntual en el que tener todo el código transpilado en un solo archivo no refleja ser un problema.*"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Caso"
    },
    {
      "type": "MarkdownBlock",
      "text": "Backend para consumir una API externa y poder controlar el consumo."
    },
    {
      "type": "MarkdownBlock",
      "text": "En este caso la API pública de IMDB:\n\nhttps://github.com/SpEcHiDe/IMDbOT/wiki"
    },
    {
      "type": "GiphyBlock",
      "text": "8EmeieJAGjvUI$%&Empecemos"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Requerimientos"
    },
    {
      "type": "MarkdownBlock",
      "text": "- node v20\n- pnpm"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Configuración inicial"
    },
    {
      "type": "MarkdownBlock",
      "text": "Iniciar proyecto:\n```sh\nmkdir ts-backend\ncd ts-backend\npnpm init\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Dependencias"
    },
    {
      "type": "MarkdownBlock",
      "text": "Del proyecto:\n```sh\npnpm add -E fastify\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "En este caso se usará fastify, aunque podría ser cualquier framework."
    },
    {
      "type": "MarkdownBlock",
      "text": "De desarrollo:\n```sh\npnpm add -D -E @types/node esbuild\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Configuración `package.json`"
    },
    {
      "type": "MarkdownBlock",
      "text": "Script para compilar el proyecto:\n\n`build.js`\n```ts\nimport esbuild from \"esbuild\";\n\nesbuild.build({\n  entryPoints: [\"src/index.ts\"],\n  bundle: true,\n  platform: \"node\",\n  format: \"esm\",\n  outfile: \".out/index.js\",\n  external: [\"fastify\"],\n});\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "Es necesario añadir fastify como externo para que esbuild no lo considere al momento de transpilar."
    },
    {
      "type": "MarkdownBlock",
      "text": "Ahora modificar el `package.json` con las siguientes propiedades:\n```json\n{...\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"node build.js\",\n    \"start\": \"node .out/index.js\"\n  },\n...}\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Punto de entrada"
    },
    {
      "type": "MarkdownBlock",
      "text": "Crear el script principal para levantar el proyecto:\n\n`src/index.ts`\n```ts\nimport Fastify from \"fastify\";\n\nconst fastify = Fastify();\n\nfastify.get(\"/\", () => {\n  return { hi: \"you\" };\n});\n\nfastify.listen({ port: 8080 });\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Prueba"
    },
    {
      "type": "MarkdownBlock",
      "text": "Ahora toca levantar el servidor con los siguientes comandos:\n```sh\npnpm run build\npnpm run start\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "Respuesta:\n```ts\n// http://localhost:8080/\n{\n  \"hi\": \"you\"\n}\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "# API"
    },
    {
      "type": "MarkdownBlock",
      "text": "Bastaría con añadir el controlador para consumir la API:\n```ts\ntype Movie = {\n  title: string;\n  year: string;\n  url: string;\n};\n\nfastify.get(\"/search-movie/:query\", async (request) => {\n  const q = (request.params as { query: string }).query;\n  const res = await fetch(`https://search.imdbot.workers.dev/?q=${q}`);\n  const data = await res.json();\n  const movies: Movie[] = data.description?.map((movie) => ({\n    title: movie[\"#TITLE\"],\n    year: movie[\"#YEAR\"],\n    url: movie[\"#IMDB_URL\"],\n  }));\n  return movies;\n});\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "Levantamos el servidor nuevamente y la respuesta tendría el siguiente formato:\n```json\n// http://localhost:8080/search-movie/star-wars\n\n[\n  {\n    \"title\": \"Star Wars: The Bad Batch\",\n    \"year\": 2021,\n    \"url\": \"https://imdb.com/title/tt12708542\"\n  },\n  {\n    \"title\": \"Star Wars: Episode IV - A New Hope\",\n    \"year\": 1977,\n    \"url\": \"https://imdb.com/title/tt0076759\"\n  },\n...\n```"
    },
    {
      "type": "MarkdownBlock",
      "text": "# Extra"
    },
    {
      "type": "MarkdownBlock",
      "text": "Por ir directo al punto, salteé partes importantes a considerar."
    },
    {
      "type": "MarkdownBlock",
      "text": "Por seguridad es necesario configurar el CORS, para ello se puede utilizar `@fastify/cors`."
    },
    {
      "type": "MarkdownBlock",
      "text": "Para la experiencia de desarrollo quedan muchas cosas en el aire, por ejemplo las siguientes dependencias podrían servir de ayuda:\n\n- pino-pretty: para imprimir mensajes más legibles.\n- supervisor: para detectar cambios en tiempo real de la carpeta `src`.\n- concurrently: para ejecutar esbuild en modo watch y `supervisor`."
    },
    {
      "type": "MarkdownBlock",
      "text": "# Caso real"
    },
    {
      "type": "MarkdownBlock",
      "text": "Utilizo esta forma de hacer backend para consumir la API de Gemini Pro. Verifica la autenticación y cantidad de consultas disponibles por usuario a la API."
    },
    {
      "type": "ImageBlock",
      "text": "/esbuild.gif"
    },
    {
      "type": "MarkdownBlock",
      "text": "No confíen en la respuesta de Gemini, pero es cierto que no es escalable. Para este caso puntual, es más que suficiente."
    }
  ]
}